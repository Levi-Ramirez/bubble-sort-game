{"version":3,"sources":["game-funcs/Left-Right-Buttons.js","game-layout/Game-Lay.jsx","App.js","reportWebVitals.js","index.js"],"names":["swap","arr","firstIndex","secIndex","tempEl","moveLeft","index","array","moveRight","length","quickSort","low","high","sortedIndex","left","right","pivot","partition","mergeSort","leftBeg","rightEnd","mid","parseInt","leftArrSize","rightArrSize","leftArr","Array","rightArr","i","j","k","merge","SVG","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mainArray","counter","goal","resetStates","time","Promise","resolve","setTimeout","myArray","push","myGoal","Math","floor","random","setState","_this$state","currentGoal","maxGoal","document","getElementById","style","color","myBool","myCount","sleep","_this2","_this$state2","currentCount","react_default","a","createElement","Fragment","className","id","onClick","bubbleSort","map","value","idx","key","height","concat","moveLeftArray","moveRightArray","margin-top","newGoal","React","Component","App","Game_Lay_SVG","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4383e0e7.chunk.js","sourcesContent":["//import { waitFor } from \"@testing-library/dom\";\n\n\n\n\nfunction swap(arr, firstIndex, secIndex) {\n  let tempEl = arr[firstIndex];\n  arr[firstIndex] = arr[secIndex];\n  arr[secIndex] = tempEl;\n}\n\nexport function moveLeft(index, array) {\n  if (index !== 0) {\n    /*    var left = array[index - 1];\n        array[index - 1] = array[index];\n        array[index] = left;*/\n    swap(array, index, index - 1);\n\n    return array;\n  }\n  return array;\n}\n\nexport function moveRight(index, array) {\n  if (index !== array.length - 1) {\n    /*\n    var right = array[index + 1];\n    array[index + 1] = array[index];\n    array[index] = right;*/\n\n    swap(array, index, index + 1);\n    return array;\n  }\n  return array;\n}\n\nexport function bubbleSort(array) {\n  let myBool = true; //will turn false if there were no sorts\n  while (myBool) {\n    myBool = false;\n    for (let i = 0; i <= (array.length - 2); i++) { // -2 because length is 1 based and we will check the first and then the element after, so arr.length is 2 longer than needed\n      if (array[i] > array[i + 1]) {\n        swap(array, i, i + 1);\n        myBool = true;\n      }\n    }\n  }\n  return array;\n}\n\n\nfunction partition(arr, left, right) {\n  let pivot = right;\n  left--;\n  while (left < right) {\n    do {\n      ++left;\n    } while (arr[left] < arr[pivot]);\n\n    do {\n      --right;\n    } while (arr[right] >= arr[pivot]);\n\n    if (left < right) {\n      swap(arr, left, right);\n    }\n  }\n\n  swap(arr, left, pivot);\n  return left;\n}\n\nexport function quickSort(arr, low, high) {\n  if (low < high) {\n\n    // sorted element's index\n    let sortedIndex = partition(arr, low, high);\n\n    // Separately sort elements before\n    // partition and after partition\n    quickSort(arr, low, sortedIndex - 1);\n    quickSort(arr, sortedIndex + 1, high);\n  }\n}\n\n\nfunction merge(arr, left, mid, right) {\n  var leftArrSize = mid - left + 1;\n  var rightArrSize = right - mid;\n\n  var leftArr = new Array(leftArrSize);\n  var rightArr = new Array(leftArrSize); //temp arrs\n\n  //data copy loops\n  for (let i = 0; i < leftArrSize; i++) {\n    leftArr[i] = arr[left + i];\n  }\n  for (let j = 0; j < rightArrSize; j++) {\n    rightArr[j] = arr[mid + 1 + j];\n  }\n\n  // leftArr index\n  let i = 0\n  // rightArr index\n  let j = 0;\n  // index of the elements we are working on in the original array (arr)\n  var k = left;\n\n  while (i < leftArrSize && j < rightArrSize) {\n    if (leftArr[i] <= rightArr[j]) {\n      arr[k] = leftArr[i];\n      i++;\n    }\n    else {\n      arr[k] = rightArr[j];\n      j++;\n    }\n    k++;\n  }\n\n  // Copy the remaining elements in leftArr/rightArr (if any)\n  while (i < leftArrSize) {\n    arr[k] = leftArr[i];\n    i++;\n    k++;\n  }\n  while (j < rightArrSize) {\n    arr[k] = rightArr[j];\n    j++;\n    k++;\n  }\n}\nexport function mergeSort(arr, leftBeg, rightEnd) {\n  if (leftBeg >= rightEnd) {\n    return;\n  }\n  var mid = parseInt((rightEnd - leftBeg) / 2) + leftBeg; //parseInt(--) converts string/decimal to a 'int'\n  //breaks up left recursively\n  mergeSort(arr, leftBeg, mid);\n  //breaks up right recursively\n  mergeSort(arr, mid + 1, rightEnd);\n  merge(arr, leftBeg, mid, rightEnd);\n}\n\n\n\n\n\nexport default { moveLeft, moveRight, bubbleSort, mergeSort, quickSort };","import React from 'react';\nimport './Game-Lay.css';\nimport { moveLeft, moveRight, quickSort, mergeSort } from '../game-funcs/Left-Right-Buttons.js';\n\nexport default class SVG extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mainArray: [],\n      counter: 0,\n      goal: 0,\n    };\n  }\n  componentDidMount() {\n    this.resetStates();\n  }\n\n  sleep(time) {\n    return new Promise((resolve) => setTimeout(resolve, time))\n  }\n\n\n\n  resetStates() {\n    const myArray = [];\n    const numArrElems = 8;\n    for (let i = 1; i <= numArrElems; i++) {\n      myArray.push(i * 50);\n    }\n\n    const maxGoal = (numArrElems * (numArrElems - 1)) / 2;\n    let myGoal = Math.floor(Math.random() * (maxGoal - 1) + 1)\n    this.setState({ mainArray: myArray, counter: 0, goal: myGoal });\n\n  }\n\n  newGoal() {\n    let myGoal = 0;\n    const { mainArray: myArray, goal: currentGoal } = this.state;\n    const maxGoal = (myArray.length * (myArray.length - 1)) / 2;\n    do {\n      myGoal = Math.floor(Math.random() * (maxGoal - 1) + 1)\n    } while (myGoal === currentGoal)\n\n\n    this.setState({ counter: 0, goal: myGoal });\n    document.getElementById(\"goal\").style.color = \"rgb(0, 0, 0)\";\n    document.getElementById(\"counter\").style.color = \"rgb(0, 0, 0)\";\n  }\n\n  moveLeftArray(index, array) {\n    this.setState({ mainArray: moveLeft(index, array) });\n  }\n\n  moveRightArray(index, array) {\n    this.setState({ mainArray: moveRight(index, array) });\n  }\n\n  async bubbleSort(array) {\n    document.getElementById(\"goal\").style.color = \"rgb(0, 0, 0)\";\n    document.getElementById(\"counter\").style.color = \"rgb(0, 0, 0)\"; //reset to black\n\n    let myBool = true; //will turn false if there were no sorts\n    var myCount = 0;\n    this.setState({ counter: myCount })\n    const { goal: myGoal } = this.state;\n    while (myBool) {\n      myBool = false;\n      for (let i = 0; i <= (array.length - 2); i++) { // -2 because length is 1 based and we will check the first and then the element after, so arr.length is 2 longer than needed\n        if (array[i] > array[i + 1]) {\n          ++myCount;\n          await this.sleep(800);\n          swap(array, i, i + 1);\n          this.setState({ mainArray: array, counter: myCount });\n          myBool = true;\n\n          //update colors\n          if (myCount === myGoal) {\n            document.getElementById(\"goal\").style.color = \"rgb(0, 228, 0)\";\n            document.getElementById(\"counter\").style.color = \"rgb(0, 228, 0)\";\n          }\n          else if (myCount > myGoal) {\n            document.getElementById(\"goal\").style.color = \"rgb(199, 0, 0)\";\n            document.getElementById(\"counter\").style.color = \"rgb(199, 0, 0)\";\n          }\n        }\n      }\n    }\n    if (myCount !== myGoal) {\n      document.getElementById(\"goal\").style.color = \"rgb(199, 0, 0)\";\n      document.getElementById(\"counter\").style.color = \"rgb(199, 0, 0)\";\n    }\n\n\n  }\n\n  quickSort(array, left, right) {\n    quickSort(array, left, right, this.partition) //imported function\n    this.setState({ mainArray: array });\n\n  }\n\n  mergeSort(array, left, right) {\n    mergeSort(array, left, right);\n    this.setState({ mainArray: array });\n\n\n  }\n\n  render() {\n\n    const { mainArray: myArray, counter: currentCount, goal: myGoal } = this.state;\n    return (\n      <>\n        <div className=\"main-page\">\n\n\n          <div className=\"left\">\n            <div className=\"paragraph\"> {'>'} <span className=\"bold\">Goal:</span> match the counter with the goal number.</div>\n            <div className=\"paragraph\"> {'>'} <span className=\"bold\">Rules/Gameplay:</span> Arrange the bars using the arrows at the bottom\n            of each bar to an order you believe will make the counter equal the goal\n            number of steps when you run the Bubble Sort algorithm. Each \"step\" is\n            counted when two bars swap places.\n            </div>\n            <div className=\"paragraph\"> {'>'} <span className=\"bold\">Redo:</span> if you are unsatisfied with the order of your bars, reset\n            the graph using the \"Quick Sort\" or \"Merge Sort\" buttons which will\n            sort your graph seemily instantly. If you would like a new goal, press\n            the \"New Goal\" button and a new goal will be randomly generated.\n            </div>\n          </div>\n\n\n          <div className=\"middle\">\n            <div className=\"goal-count-holder\">\n              <div id=\"goal\" className=\"title-2 goal\"> Goal: {myGoal} </div>\n              <div id=\"counter\" className=\"title-2 counter\"> Counter: {currentCount} </div>\n\n            </div>\n            <div className=\"array-holder\">\n              <div className=\"sorting-button-holder\">\n                <button onClick={(() => this.bubbleSort(myArray))} className=\"bubble-button\">Start Bubble Sort</button>\n              </div>\n              {myArray.map((value, idx) => (\n                <div key={idx}\n                  className=\"array-elements\"\n                  style={{ height: `${value}px` }}>\n                  {value / 50}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"move-button-flex\">\n              {myArray.map((value, idx) => (\n                <div key={idx}\n                  className=\"array-elements\"\n                  style={{ height: `30px` }}>\n                  <button onClick={(() => this.moveLeftArray(idx, myArray))} className=\"move-left\"> {'<'} </button>\n                  <button onClick={(() => this.moveRightArray(idx, myArray))} className=\"move-right\"> {'>'} </button>\n                </div>\n              ))}\n            </div>\n\n          </div>\n\n\n\n          <div className=\"right\">\n            <div className=\"reset-graph-holder\">\n              <div className=\"s-text\"> Reset graph: </div>\n              <button onClick={(() => this.quickSort(myArray, 0, myArray.length - 1))} className=\"side-button buttons\">Quick Sort</button>\n              <button onClick={(() => this.mergeSort(myArray, 0, myArray.length - 1))} className=\"side-button buttons\" style={{ 'margin-top': `5px` }}>Merge Sort</button>\n              <div className=\"s-text\" style={{ 'margin-top': `5px` }}> Get New Goal: </div>\n              <button className=\"side-button buttons\" onClick={(() => this.newGoal())}>New Goal</button>\n            </div>\n          </div>\n\n        </div>\n\n      </>\n    );\n\n  }\n\n\n}\n\nfunction swap(arr, firstIndex, secIndex) {\n  let tempEl = arr[firstIndex];\n  arr[firstIndex] = arr[secIndex];\n  arr[secIndex] = tempEl;\n}\n","import React from 'react';\nimport './App.css';\nimport './game-layout/Game-Lay.css'\nimport SVG from './game-layout/Game-Lay'\n\nfunction App() {\n  return (\n    <>\n      <div className=\"header\">\n        <div></div>\n        <div className=\"header-1\"> Bubble Sort Game </div>\n        <div className=\"header-2\"> By Levi Ramirez </div>\n      </div>\n      <SVG></SVG>\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}